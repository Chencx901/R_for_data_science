source('~/GitHub/R_for_data_science/ch2_ggplot.R', echo=TRUE)
# change to geom_smooth
ggplot(data = mpg)+geom_smooth(mapping = aes(x = displ,y = hwy,linetype = drv))
# change to geom_smooth
ggplot(data = mpg)+geom_smooth(mapping = aes(hwy~displ,linetype = drv))
# change to geom_smooth
ggplot(data = mpg)+geom_smooth(mapping = aes(x = displ,y = hwy,linetype = drv))
?geom_smooth
# change to geom_smooth
ggplot(data = mpg)+geom_smooth(mapping = aes(x = displ,y = hwy,linetype = drv),method = lm)
# change to geom_smooth
ggplot(data = mpg)+geom_smooth(mapping = aes(x = displ,y = hwy,linetype = drv))
# change to geom_smooth
ggplot(data = mpg)+geom_smooth(mapping = aes(x = displ,y = hwy,linetype = drv，color = drv))
# change to geom_smooth
ggplot(data = mpg)+geom_smooth(mapping = aes(x = displ,y = hwy,linetype = drv,color = drv))
# change to geom_smooth
ggplot(data = mpg)+geom_point(mapping = ())+geom_smooth(mapping = aes(x = displ,y = hwy,linetype = drv))
# change to geom_smooth
ggplot(data = mpg)+geom_point(mapping = ())+geom_smooth(mapping = aes(x = displ,y = hwy,linetype = drv))
# change to geom_smooth
ggplot(data = mpg)+geom_point(mapping = (aes =(x = displ,y = hwy,color = drv)))+geom_smooth(mapping = aes(x = displ,y = hwy,linetype = drv))
# change to geom_smooth
ggplot(data = mpg)+geom_point(mapping = (aes(x = displ,y = hwy,color = drv)))+geom_smooth(mapping = aes(x = displ,y = hwy,linetype = drv))
# change to geom_smooth
ggplot(data = mpg)+geom_point(mapping = (aes(x = displ,y = hwy,color = drv)))+geom_smooth(mapping = aes(x = displ,y = hwy,linetype = drv,color = drv))
# global aes
ggplot(data = mpg,mapping = aes(x = displ,y = hwy))+
geom_point(mapping = aes(color = class))+geom_smooth(mapping = (linetype = drv))
# global aes
ggplot(data = mpg,mapping = aes(x = displ,y = hwy))+
geom_point(mapping = aes(color = class))+geom_smooth(mapping = aes(linetype = drv))
# global aes
ggplot(data = mpg,mapping = aes(x = displ,y = hwy))+
geom_point(mapping = aes(color = class))+geom_smooth(data = filter(mpg,class =='subcompact'),se = FALSE)
?gemo_smooth
?gemo_smooth()
?geom_smooth()
diamonds
?diamonds
# bar plot
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut))
?geom_bar()
# bar plot
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut,y = ..prob..,group = 1))
?geom_bar()
# bar plot
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut,y = ..prop..,group = 1))
#stats-ummary
ggplot(data = diamonds) + stat_summary(mapping = aes(x = cut,y = depth),
fun.ymin = min,
fun.ymax = max,
fun.y = median))
#stats-ummary
ggplot(data = diamonds) + stat_summary(mapping = aes(x = cut,y = depth),
fun.ymin = min,
fun.ymax = max,
fun.y = median)
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut,y = ..prop..))
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut,y = ..prop..,fill = color))
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut,y = ..prop..,fill = color,group = 2))
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut,y = ..prop..,fill = color,group = 1))
library(nycflight13)
source('~/GitHub/R_for_data_science/dplyr_data_trans.R', echo=TRUE)
flighs
flights
?flights
View(flights)
# filter rows
filter(filghts,month == 1,day == 1)
# filter rows
filter(flights,month == 1,day == 1)
(dec25 <- filter(flights,month == 12,day == 25))
filter(flights,month %in% c(11,12))
# is.na()
df <- tibble(x = c(1,3,na))
# is.na()
df <- tibble(x = c(1,3,NA))
filter(df,is.na(x)|x>=1)
filter(flights,arr_delay > 120)
filter(flights,dest %in% ('IAH','HOU'))
filter(flights,dest %in% ('IAH','HOU'))
filter(flights,dest %in% c('IAH','HOU'))
filter(flights, month %in% c(7,8,9))
filter(flights, arr_delay >120&dep_delay<0)
filter(flights, (dep_time-sched_dep_time)>=60 & abs(arr_time-sched_dep_time) >= 30)
filter(flights, dep_delay>=60 & abs(arr_delay) >= 30)
# arrange() - arrange rows，change order
arrange(flights,year,month,day)
arrange(flights,desc(arr_delay))
arrange(df,desc(is.na(x)))
arrange(flights,desc(dep_delay,arr_delay))
arrange(flights,dep_time)
arrange(flights,air_time)
# select - select variabels by names
select(flights,c('year','month','day'))
flights[c('year','month','day')]
# same as flights[c('year','month','day')]
#select a group of variables
select(flights,year:carrier)
flights.col
flights.columns
flights[c(1:10)]
names(flights)
names(flights) between("year","carrier")
between(names(flights),'year','carrier')
between(names(flights),year,carrier)
select(flights,-(year:day))
# starts_with("abc")/ends_with("xyz")/contains("ijk")/matches("(.)\\1")
# num_range("x",1:3) matches x1,x2,x3
select(flights, time_hour, air_time, everything()) # move to start
select(flights,month,month)
select(flights,one_of(vars <- c(
"year", "month", "day", "dep_delay", "arr_delay"
)
))
# mutate() - create new variables
flights—sml <- select(flights,year:day,ends_with('delay'),
distance,air_time)
flights_sml <- select(flights,year:day,ends_with('delay'),
distance,air_time)
mutate(flights_sml,gain = arr_delay-dep_delay,
speed = distance/air_time*60)
mutate(flights_sml,gain = arr_delay-dep_delay,
hours = air_time/60
speed = distance/hours)
mutate(flights_sml,gain = arr_delay-dep_delay,
hours = air_time/60,
speed = distance/hours)
transmute(flights_sml,gain = arr_delay-dep_delay,
hours = air_time/60,
speed = distance/hours)
lead(1:10, 1)
lead(1:10, 2)
lag(1:10,1)
lag(1:10,2)
# summarize() - grouped summaries
summarise(flights,delay = mean(dep_delay,na.rm = TRUE))
by_date <- group_by(flights,year,month,day)
summarise(by_date,delay = mean(dep_delay,na.rm=TRUE))
by_dest <- group_by(flights,dest)
delay <- summarize(by_dest,count = n(),dist = mean(distance,na.rm = TRUE),
delay = mean(arr_delay,na.rm = TRUE))
delay <- fliter(delay,count > 20,dest != 'HNL')
by_dest <- group_by(flights,dest)
delay <- summarize(by_dest,count = n(),dist = mean(distance,na.rm = TRUE),
delay = mean(arr_delay,na.rm = TRUE))
delay <- filter(delay,count > 20,dest != 'HNL')
ggplot(data = delay,mapping = aes(x = dist,y = delay))+
geom_point(mapping = aes(size = count),alpha = 1/3)+
geom_smooth(se = FALSE)
# using pipe
delays <- flights %>% group_by(dest) %>%
summarize(count = n(),dist = mean(distance,na.rm = TRUE),
delay = mean(arr_delay,na.rm = TRUE)) %>%
filter(count >= 20,dest!='HNL')
delays %>% filter(n >25) %>%
ggplot(mapping = aes(x = n,y = delay))+
gemo_point(alpha = 1/10)
delays <- flights %>% group_by(dest) %>%
summarize(count = n(),dist = mean(distance,na.rm = TRUE),
delay = mean(arr_delay,na.rm = TRUE)) %>%
filter(count >= 20,dest!='HNL')
delays %>% filter(n >25) %>%
ggplot(mapping = aes(x = n,y = delay))+
gemo_point(alpha = 1/10)
delays1 <- not_cancelled %>%
group_by(tailnum) %>%
summarize(
delay = mean(arr_delay, na.rm = TRUE),
n = n()
)
delays1 %>% filter(n >25) %>%
ggplot(mapping = aes(x = n,y = delay))+
gemo_point(alpha = 1/10)
not_cancelled <- flights %>%
filter(!is.na(dep_delay), !is.na(arr_delay))
delays1 <- not_cancelled %>%
group_by(tailnum) %>%
summarize(
delay = mean(arr_delay, na.rm = TRUE),
n = n()
)
delays1 %>% filter(n >25) %>%
ggplot(mapping = aes(x = n,y = delay))+
gemo_point(alpha = 1/10)
delays1 %>% filter(n >25) %>%
ggplot(mapping = aes(x = n,y = delay))+
geom_point(alpha = 1/10)
# Lahman example
batting <- tibble(Lahman::Batting)
# Lahman example
batting <- as_tibble(Lahman::Batting)
batting
batters <- batting %>% group_by(playerID) %>% summarize(ba = sum(H,na.rm = TRUE)/sum(AB,na.rm = TRUE),ab = sum(AB,na.rm = TRUE))
batters %>%　filter(ab > 100) %>% ggplot(mapping = aes(x = ab,y = ba)) +geom_point()+geom_smooth(se = FALSE)
library(tidyverse)
# bar chart - dist of categorical var
diamonds %>% count(cut) # count
diamonds %>% ggplot(aes(x = cut)) + geom_bar()
# histogram - dist of continous var
diamonds %>% ggplot(aes(x = carat)) + geom_histogram(binwidth = .5)
# calculate
diamonds %>% count(cut_width(carat,0.5))
# smaller binwidth
smaller <- diamonds %>% filter(carat < 3)
ggplot(smaller,aes(x = carat)) + geom_histogram(binwidth = 0.1)
# geom_freqploy use lines
smaller %>% ggplot(aes(x = carat,color = cut)) + geom_freqpoly(binwidth = 0.1)
# outliers
ggplot(data = diamonds) + geom_histogram(mapping = aes(x = y),binwidth = .5) + coord_cartesian(ylim = c(0,50))
# unusual
unusual <- diamonds %>% filter(y<3|y>20) %>% arrange(y)
unusual
# replace unusual values with missing values
diamonds2 <- diamonds %>% mutate(y = ifelse(y<3|y>20,NA,y))
diamonds2 %>% ggplot(aes(x = x,y = y)) + geom_point(na.rm = TRUE)
# covariation
# density
ggplot(data = diamonds,mapping = aes(x = price,y = ..density..)) + geom_freqpoly(mapping = aes(color = cut),binwidth = 500)
library(tidyverse)
# covariation
# density
ggplot(data = diamonds,mapping = aes(x = price,y = ..density..)) + geom_freqpoly(mapping = aes(color = cut),binwidth = 500)
diamonds %>% ggplot(aes(x = cut,y = price)) + geom_boxplot()
